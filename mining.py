#!/usr/bin/env python3

""" Reads Jsons containing daily stock data and returns the best and worst performances by month """

__author__ = 'Curtis and Dimitar and Shawn'
__email__ = "ses@drsusansim.org"

__copyright__ = "2014 Susan Sim"
__license__ = "MIT License"

__status__ = "Prototype"

# imports one per line
import json
import datetime

# Global variables.
monthly_averages = []
stock_data = []


def read_stock_data(stock_name, stock_json):
    """
    Opens JSONs containing historical stock data and compiles monthly averages of trade volume and closing price.
    :param stock_file_name: A JSON formatted file where daily stock data is kept
    :param
    :return: monthly_averages, a list of tuples of monthly stock data
    """
    global monthly_averages
    # clears the contents of monthly_averages
    monthly_averages.clear()
    # read json file into stock_data_history file
    stock_data_history = read_json_from_file(stock_json)
    # temporary storage dictionaries to store monthly sum of numerator and denominator
    monthly_sum = {}

    for daily_stock_result in stock_data_history:
        year_month = datetime.datetime.strptime(daily_stock_result['Date'], '%Y-%m-%d').strftime('%Y/%m')
        trade_volume = int(daily_stock_result['Volume'])
        closing = float(daily_stock_result['Close'])

        # creates dictionary to store numerator and denominator for each month
        # year_month as a key, and pair of numerator and denominator as a value (dictionary type)
        if year_month in monthly_sum:
            monthly_sum[year_month]['numerator'] += trade_volume * closing
            monthly_sum[year_month]['denominator'] += trade_volume
        else:
            monthly_sum[year_month] = {'numerator': trade_volume * closing, 'denominator': trade_volume}

    # Once monthly sum is compiled, produce the list of tuples to store monthly averages values.
    for yr_month_key in monthly_sum:
        numerator = monthly_sum[yr_month_key]['numerator']
        denominator = monthly_sum[yr_month_key]['denominator']
        monthly_averages.append((yr_month_key, round(numerator/denominator, 2)))
    return


def six_best_months():
    """
    Using the monthly averages generated by red_stock_data, generates a list of the six best performing months
    by volume and capacity
    (lst) -> (tup, le)
    :return: best_six, a list of the six best performing months of monthly_averages
    """
    # Use monthly_averages variable and apply sorting algorithms on list to get the best 6
    best_six = sorted(monthly_averages, key=lambda averages: averages[1], reverse=True)[:6]
    return best_six


def six_worst_months():
    """
    Using the monthly averages generated by red_stock_data, generates a list of the six worst performing months
    by volume and capacity
    (lst) -> (tup, le)
    :return: worst_six, a list of the six best performing months of monthly_averages
    """
    # Use monthly_averages variable and apply sorting algorithms on list to get the worst 6
    worst_six = sorted(monthly_averages, key=lambda averages: averages[1])[:6]
    return worst_six


def read_json_from_file(file_name):
    """
    Opens a JSON with file reader and loads it as a Python data structure
    :param file_name: a JSON formatted file
    :return:
    """
    with open(file_name) as file_handle:
        file_contents = file_handle.read()

    return json.loads(file_contents)
